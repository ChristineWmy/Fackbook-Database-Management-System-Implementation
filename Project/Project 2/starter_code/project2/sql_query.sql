-- Query 0: Birth Months

-- Query 1: First Names

-- LONGEST / SHORTEST

SELECT DISTINCT FIRST_NAME
FROM PROJECT2.PUBLIC_USERS
WHERE LENGTH(FIRST_NAME) >= ALL(
	SELECT LENGTH(FIRST_NAME)
	FROM PROJECT2.PUBLIC_USERS
	GROUP BY LENGTH(FIRST_NAME)
	-- ORDER BY LENGTH(FIRST_NAME) ASC
);

SELECT DISTINCT FIRST_NAME, LENGTH(FIRST_NAME)
FROM PROJECT2.PUBLIC_USERS
GROUP BY LENGTH(FIRST_NAME);

SELECT COUNT(*) AS NUM, FIRST_NAME
FROM PROJECT2.PUBLIC_USERS
GROUP BY FIRST_NAME
ORDER BY NUM ASC;

SELECT DISTINCT FIRST_NAME
FROM PROJECT2.PUBLIC_USERS
WHERE LENGTH(FIRST_NAME) <= ALL(
	SELECT LENGTH(FIRST_NAME)
	FROM PROJECT2.PUBLIC_USERS
	GROUP BY LENGTH(FIRST_NAME) )
ORDER BY FIRST_NAME ASC;


-- Query 2: Lonely Users

SELECT U1.USER_ID, FIRST_NAME, LAST_NAME
FROM PROJECT2.PUBLIC_USERS U1, (
	SELECT USER_ID
	FROM PROJECT2.PUBLIC_USERS
	MINUS
	(SELECT DISTINCT USER1_ID
	FROM PROJECT2.PUBLIC_FRIENDS
	UNION
	SELECT DISTINCT USER2_ID
	FROM PROJECT2.PUBLIC_FRIENDS)
) U2
WHERE U1.USER_ID = U2.USER_ID
ORDER BY U1.USER_ID ASC;

-- Query 3: Users who loive away from home

SELECT DISTINCT U.USER_ID, U.FIRST_NAME, U.LAST_NAME
FROM PROJECT2.PUBLIC_USERS U, PROJECT2.PUBLIC_User_Hometown_Cities H, PROJECT2.PUBLIC_User_Current_Cities C
WHERE U.USER_ID = H.USER_ID AND U.USER_ID = C.USER_ID AND H.HOMETOWN_CITY_ID != C.CURRENT_CITY_ID
ORDER BY U.USER_ID ASC;

SELECT COUNT(DISTINCT U.USER_ID)
FROM PROJECT2.PUBLIC_USERS U, PROJECT2.PUBLIC_User_Hometown_Cities H, PROJECT2.PUBLIC_User_Current_Cities C
WHERE U.USER_ID = H.USER_ID AND U.USER_ID = C.USER_ID AND H.HOMETOWN_CITY_ID != C.CURRENT_CITY_ID;

-- Query 4: Highly-Tagged Photos



SELECT P.PHOTO_ID, P.ALBUM_ID, P.PHOTO_LINK, A.ALBUM_NAME
FROM PROJECT2.PUBLIC_PHOTOS P 
JOIN PROJECT2.PUBLIC_ALBUMS A ON P.ALBUM_ID = A.ALBUM_ID
JOIN (
	SELECT TAG_PHOTO_ID
	FROM (
	SELECT TAG_PHOTO_ID, COUNT(*)
	FROM PROJECT2.PUBLIC_TAGS
	GROUP BY TAG_PHOTO_ID
	ORDER BY COUNT(*) DESC, TAG_PHOTO_ID ASC)
	WHERE ROWNUM <= 5
) T ON P.PHOTO_ID = T.TAG_PHOTO_ID
ORDER BY P.PHOTO_ID ASC;

SELECT T1.TAG_PHOTO_ID, T.TAG_SUBJECT_ID, U.FIRST_NAME, U.LAST_NAME
FROM PROJECT2.PUBLIC_users U
JOIN PROJECT2.PUBLIC_TAGS T ON U.USER_ID = TAG_SUBJECT_ID
JOIN (
	SELECT TAG_PHOTO_ID
	FROM (
	SELECT TAG_PHOTO_ID, COUNT(*)
	FROM PROJECT2.PUBLIC_TAGS
	GROUP BY TAG_PHOTO_ID
	ORDER BY COUNT(*) DESC, TAG_PHOTO_ID ASC)
	WHERE ROWNUM <= 5
) T1 ON T.TAG_PHOTO_ID = T1.TAG_PHOTO_ID
ORDER BY T1.TAG_PHOTO_ID ASC, T.TAG_SUBJECT_ID ASC;


-- Query 5: Match Maker

SELECT T.USER_ID1, T.USER_ID2
FROM (
	SELECT DISTINCT T1.TAG_SUBJECT_ID USER_ID1, T2.TAG_SUBJECT_ID USER_ID2
	FROM PROJECT2.PUBLIC_TAGS T1, PROJECT2.PUBLIC_TAGS T2
	WHERE T1.TAG_PHOTO_ID = T2.TAG_PHOTO_ID AND T1.TAG_SUBJECT_ID < T2.TAG_SUBJECT_ID
	INTERSECT
	(SELECT DISTINCT U1.USER_ID USER_ID1, U2.USER_ID USER_ID2
	FROM PROJECT2.PUBLIC_USERS U1, PROJECT2.PUBLIC_USERS U2 
	WHERE U1.USER_ID < U2.USER_ID AND U1.GENDER = U2.GENDER AND ABS(U1.YEAR_OF_BIRTH - U2.YEAR_OF_BIRTH) <= 5
	MINUS
	SELECT *
	FROM PROJECT2.PUBLIC_FRIENDS)
) T
WHERE ROWNUM <= 5
ORDER BY T.USER_ID1 ASC, T.USER_ID2 ASC;

SELECT C.USER_ID1, C.USER_ID2, T1.TAG_PHOTO_ID, P.ALBUM_ID, P.PHOTO_LINK, A.ALBUM_NAME
FROM PROJECT2.PUBLIC_TAGS T1
JOIN PROJECT2.PUBLIC_TAGS T2 ON T1.TAG_PHOTO_ID = T2.TAG_PHOTO_ID 
JOIN PROJECT2.PUBLIC_PHOTOS P ON T1.TAG_PHOTO_ID = P.PHOTO_ID
JOIN PROJECT2.PUBLIC_ALBUMS A ON P.ALBUM_ID = A.ALBUM_ID
JOIN (
	SELECT T.USER_ID1, T.USER_ID2
	FROM (
		SELECT DISTINCT T1.TAG_SUBJECT_ID USER_ID1, T2.TAG_SUBJECT_ID USER_ID2
		FROM PROJECT2.PUBLIC_TAGS T1, PROJECT2.PUBLIC_TAGS T2
		WHERE T1.TAG_PHOTO_ID = T2.TAG_PHOTO_ID AND T1.TAG_SUBJECT_ID < T2.TAG_SUBJECT_ID
		INTERSECT
		(SELECT DISTINCT U1.USER_ID USER_ID1, U2.USER_ID USER_ID2
		FROM PROJECT2.PUBLIC_USERS U1, PROJECT2.PUBLIC_USERS U2 
		WHERE U1.USER_ID < U2.USER_ID AND U1.GENDER = U2.GENDER AND ABS(U1.YEAR_OF_BIRTH - U2.YEAR_OF_BIRTH) <= 5
		MINUS
		SELECT *
		FROM PROJECT2.PUBLIC_FRIENDS)
	) T
	WHERE ROWNUM <= 5
	ORDER BY T.USER_ID1 ASC, T.USER_ID2 ASC
) C ON T1.TAG_SUBJECT_ID = C.USER_ID1 AND T2.TAG_SUBJECT_ID = C.USER_ID2
GROUP BY (C.USER_ID1, C.USER_ID2);




SELECT C.USER_ID1, C.USER_ID2, COUNT(T1.TAG_PHOTO_ID)
FROM PROJECT2.PUBLIC_TAGS T1
JOIN PROJECT2.PUBLIC_TAGS T2 ON T1.TAG_PHOTO_ID = T2.TAG_PHOTO_ID 
JOIN (
	SELECT T.USER_ID1, T.USER_ID2
	FROM (
		SELECT DISTINCT T1.TAG_SUBJECT_ID USER_ID1, T2.TAG_SUBJECT_ID USER_ID2
		FROM PROJECT2.PUBLIC_TAGS T1, PROJECT2.PUBLIC_TAGS T2
		WHERE T1.TAG_PHOTO_ID = T2.TAG_PHOTO_ID AND T1.TAG_SUBJECT_ID < T2.TAG_SUBJECT_ID
		INTERSECT
		(SELECT DISTINCT U1.USER_ID USER_ID1, U2.USER_ID USER_ID2
		FROM PROJECT2.PUBLIC_USERS U1, PROJECT2.PUBLIC_USERS U2 
		WHERE U1.USER_ID < U2.USER_ID AND U1.GENDER = U2.GENDER AND ABS(U1.YEAR_OF_BIRTH - U2.YEAR_OF_BIRTH) <= 5
		MINUS
		SELECT *
		FROM PROJECT2.PUBLIC_FRIENDS)
	) T
	WHERE ROWNUM <= 5
	ORDER BY T.USER_ID1 ASC, T.USER_ID2 ASC
) C ON T1.TAG_SUBJECT_ID = C.USER_ID1 AND T2.TAG_SUBJECT_ID = C.USER_ID2
GROUP BY (C.USER_ID1, C.USER_ID2)
ORDER BY COUNT(T1.TAG_PHOTO_ID) DESC, C.USER_ID1 ASC, C.USER_ID2 ASC;



SELECT T1.TAG_PHOTO_ID, P.ALBUM_ID, P.PHOTO_LINK, A.ALBUM_NAME
FROM PROJECT2.PUBLIC_TAGS T1
JOIN PROJECT2.PUBLIC_TAGS T2 ON T1.TAG_PHOTO_ID = T2.TAG_PHOTO_ID
JOIN PROJECT2.PUBLIC_PHOTOS P ON T1.TAG_PHOTO_ID = P.PHOTO_ID
JOIN PROJECT2.PUBLIC_ALBUMS A ON P.ALBUM_ID = A.ALBUM_ID
WHERE T1.TAG_SUBJECT_ID = 168 AND T2.TAG_SUBJECT_ID = 345
ORDER BY T1.TAG_PHOTO_ID ASC;





SELECT USER_ID, FIRST_NAME, LAST_NAME, YEAR_OF_BIRTH
FROM PROJECT2.PUBLIC_USERS
WHERE USER_ID = 168;


-- Query 7: Event-Heavy States



SELECT DISTINCT C.STATE_NAME, COUNT(*)
FROM PROJECT2.PUBLIC_USER_EVENTS E
JOIN PROJECT2.PUBLIC_CITIES C ON E.EVENT_CITY_ID = C.CITY_ID 
GROUP BY C.STATE_NAME
HAVING COUNT(*) >= ALL(
	SELECT COUNT(*)
	FROM PROJECT2.PUBLIC_USER_EVENTS E
	JOIN PROJECT2.PUBLIC_CITIES C ON E.EVENT_CITY_ID = C.CITY_ID 
	GROUP BY C.STATE_NAME
)
ORDER BY C.STATE_NAME ASC;

SELECT MAX(COUNT(*))
FROM PROJECT2.PUBLIC_USER_EVENTS E
JOIN PROJECT2.PUBLIC_CITIES C ON E.EVENT_CITY_ID = C.CITY_ID 
GROUP BY C.STATE_NAME;

SELECT DISTINCT C.STATE_NAME
FROM PROJECT2.PUBLIC_USER_EVENTS E
JOIN PROJECT2.PUBLIC_CITIES C ON E.EVENT_CITY_ID = C.CITY_ID 
GROUP BY C.STATE_NAME
HAVING COUNT(*) = 20;

-- Query 8: Oldest and Youngest Friends

	

SELECT DISTINCT YEAR_OF_BIRTH, MONTH_OF_BIRTH, DAY_OF_BIRTH
FROM USERS U 
JOIN (
	SELECT DISTINCT USER2_ID AS USER_ID
	FROM PROJECT2.PUBLIC_FRIENDS
	WHERE USER1_ID = 152
	UNION
	SELECT DISTINCT USER1_ID AS USER_ID
	FROM PROJECT2.PUBLIC_FRIENDS
	WHERE USER2_ID = 152
) T ON U.USER_ID = T.USER_ID
WHERE YEAR_OF_BIRTH IS NOT NULL AND MONTH_OF_BIRTH IS NOT NULL AND DAY_OF_BIRTH IS NOT NULL
ORDER BY YEAR_OF_BIRTH ASC, MONTH_OF_BIRTH ASC, DAY_OF_BIRTH ASC;

SELECT U.USER_ID, FIRST_NAME, LAST_NAME
FROM USERS U 
JOIN (
	SELECT DISTINCT USER2_ID AS USER_ID
	FROM PROJECT2.PUBLIC_FRIENDS
	WHERE USER1_ID = 152
	UNION
	SELECT DISTINCT USER1_ID AS USER_ID
	FROM PROJECT2.PUBLIC_FRIENDS
	WHERE USER2_ID = 152
) T ON U.USER_ID = T.USER_ID
WHERE YEAR_OF_BIRTH = 987 AND MONTH_OF_BIRTH = 10 AND DAY_OF_BIRTH = 4
ORDER BY U.USER_ID DESC;

SELECT *
FROM PROJECT2.PUBLIC_USERS
WHERE YEAR_OF_BIRTH = 987 AND MONTH_OF_BIRTH = 10 AND DAY_OF_BIRTH = 4;


SELECT DISTINCT USER2_ID AS USER_ID
FROM PROJECT2.PUBLIC_FRIENDS
WHERE USER1_ID = 561
UNION
SELECT DISTINCT USER1_ID AS USER_ID
FROM PROJECT2.PUBLIC_FRIENDS
WHERE USER2_ID = 561;

-- Query 9: Potential Siblings

SELECT DISTINCT U1.USER_ID AS USER_ID1, U2.USER_ID AS USER_ID2
FROM PROJECT2.PUBLIC_USERS U1
JOIN PROJECT2.PUBLIC_USERS U2 ON  U1.USER_ID < U2.USER_ID
JOIN PROJECT2.PUBLIC_USER_HOMETOWN_CITIES HC1 ON U1.USER_ID = HC1.USER_ID
JOIN PROJECT2.PUBLIC_USER_HOMETOWN_CITIES HC2 ON U2.USER_ID = HC2.USER_ID
JOIN PROJECT2.PUBLIC_FRIENDS F ON U1.USER_ID = F.USER1_ID AND U2.USER_ID = F.USER2_ID
WHERE ABS(U1.YEAR_OF_BIRTH - U2.YEAR_OF_BIRTH) < 10 AND HC1.HOMETOWN_CITY_ID = HC2.HOMETOWN_CITY_ID
      AND HC1.HOMETOWN_CITY_ID IS NOT NULL AND HC2.HOMETOWN_CITY_ID IS NOT NULL AND U1.LAST_NAME = U2.LAST_NAME
ORDER BY U1.USER_ID ASC;

-- Query 6: 

SELECT *
FROM PROJECT2.PUBLIC_FRIENDS F1
JOIN PROJECT2.PUBLIC_FRIENDS F2 ON F1.USER1_ID = F2.USER2_ID

SELECT DISTINCT T.USER1_ID, T.USER3_ID
FROM (
	(SELECT DISTINCT T1.USER1_ID, T1.USER2_ID, F3.USER2_ID AS USER3_ID
	FROM (
		SELECT DISTINCT F1.USER1_ID AS USER1_ID, F1.USER2_ID AS USER2_ID
		FROM PROJECT2.PUBLIC_USERS U1 
		JOIN PROJECT2.PUBLIC_FRIENDS F1 ON U1.USER_ID = F1.USER1_ID
		UNION
		SELECT DISTINCT F2.USER2_ID AS USER1_ID, F2.USER1_ID AS USER2_ID
		FROM PROJECT2.PUBLIC_USERS U2
		JOIN PROJECT2.PUBLIC_FRIENDS F2 ON U2.USER_ID = F2.USER2_ID
	) T1 
	JOIN PROJECT2.PUBLIC_FRIENDS F3 ON F3.USER1_ID = T1.USER2_ID)
	UNION 
	(SELECT DISTINCT T2.USER1_ID, T2.USER2_ID, F3.USER1_ID AS USER3_ID
	FROM (
		SELECT DISTINCT F1.USER1_ID AS USER1_ID, F1.USER2_ID AS USER2_ID
		FROM PROJECT2.PUBLIC_USERS U1 
		JOIN PROJECT2.PUBLIC_FRIENDS F1 ON U1.USER_ID = F1.USER1_ID
		UNION
		SELECT DISTINCT F2.USER2_ID AS USER1_ID, F2.USER1_ID AS USER2_ID
		FROM PROJECT2.PUBLIC_USERS U2
		JOIN PROJECT2.PUBLIC_FRIENDS F2 ON U2.USER_ID = F2.USER2_ID
	) T2 
	JOIN PROJECT2.PUBLIC_FRIENDS F3 ON F3.USER2_ID = T2.USER2_ID)
) T
ORDER BY 



CREATE VIEW FRIEND_MUTUAL AS (
	SELECT DISTINCT T1.U1 AS FRIEND_A, T1.U2 AS FRIEND_B, T2.U2 AS FRIEND_C
	FROM (SELECT DISTINCT F1.USER1_ID AS U1, F1.USER2_ID AS U2
		FROM PROJECT2.PUBLIC_FRIENDS F1 
		UNION
		SELECT DISTINCT F2.USER2_ID AS U1, F2.USER1_ID AS U2
		FROM PROJECT2.PUBLIC_FRIENDS F2) T1
	JOIN (SELECT DISTINCT F1.USER1_ID AS U1, F1.USER2_ID AS U2
		FROM PROJECT2.PUBLIC_FRIENDS F1 
		UNION
		SELECT DISTINCT F2.USER2_ID AS U1, F2.USER1_ID AS U2
		FROM PROJECT2.PUBLIC_FRIENDS F2) T2 ON T1.U2 = T2.U1 AND T1.U1 < T2.U2
	WHERE (T1.U1, T2.U2) NOT IN (
		SELECT USER1_ID, USER2_ID
		FROM PROJECT2.PUBLIC_FRIENDS
	)
)


SELECT * 
FROM (
	SELECT FM.FRIEND_A, FM.FRIEND_C, COUNT(*) NUM
	FROM FRIEND_MUTUAL FM
	GROUP BY FM.FRIEND_A, FM.FRIEND_C
	ORDER BY COUNT(*) DESC, FM.FRIEND_A ASC, FM.FRIEND_C ASC
) T 
WHERE ROWNUM <= 2

SELECT U.USER_ID, U.FIRST_NAME, U.LAST_NAME
FROM FRIEND_MUTUAL FM
JOIN PROJECT2.PUBLIC_USERS U ON FM.FRIEND_B = U.USER_ID
WHERE FM.FRIEND_A = 284 AND FM.FRIEND_C = 441
ORDER BY U.USER_ID ASC;

SELECT U1.USER_ID, U1.FIRST_NAME, U1.LAST_NAME, U2.USER_ID, U2.FIRST_NAME, U2.LAST_NAME
FROM USERS U1, USERS U2
WHERE U1.USER_ID = 284 AND U2.USER_ID = 441;
































-- Query A
SELECT DISTINCT MOVIENAME
FROM MOVIES M 
JOIN (
	SELECT MOVIEID
	FROM RATINGS
	WHERE RATING > 7.0
	GROUP BY MOVIE_ID
	HAVING COUNT(*) >= 1
) T ON M.MOVIEID = T.MOVIEID
ORDER BY MOVIENAME ASC;

-- Query B
SELECT DISTINCT C.MOVIEID
FROM CASTINGS C
JOIN ACTORS A ON C.ACTORID = A.ACTORID
GROUP BY C.MOVIE_ID 
HAVING COUNT(*) > 5;

-- Query C
SELECT RV.USERNAME
FROM REVIEWERS RV  
JOIN (
	SELECT REVIEWERID
	FROM RATINGS
	WHERE RATING >= 6.3
	GROUP BY REVIEWERID
	HAVING COUNT(*) >= 10
) R ON R.REVIEWERID = RV.REVIEWERID;

-- Query D
CREATE VIEW FanFavourites AS (
	SELECT M.MOVIEID, AVG(RATING) AS AvgRating
	FROM RATINGS R
	JOIN (
		SELECT MOVIEID
		FROM RATINGS 
		GROUP BY MOVIEID
		HAVING COUNT(*) > 1000
	) M ON R.MOVIEID = M.MOVIEID
	GROUP BY MOVIEID 
	HAVING AVG(RATING) >= 8.0
);

-- Query E
SELECT R0.MOVIEID
FROM RATINGS R0
WHERE NOT EXISTS (
	SELECT REVIEWERID
	FROM REVIEWERS 
	MINUS
	SELECT R1.REVIEWERID
	FROM RATINGS R1
	WHERE R1.MOVIEID = R0.MOVIEID
)